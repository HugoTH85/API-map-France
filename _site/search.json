[
  {
    "objectID": "CarteFrance.html",
    "href": "CarteFrance.html",
    "title": "Darte de France des différentes villes",
    "section": "",
    "text": "Carte de France\n\n\nviewof table = Inputs.table(cities)\n\n\n\n\n\n\n\n\nwidth\n\n\n\n\n\n\n\nplot\n\n\n\n\n\n\n\nmutable zoom = 2350\nmutable dg = 0\nmutable hb = 47\nmutable point = [0, 47]\nmutable circle = d3.geoCircle().center(point).radius(range/230)()\n\nplot = Plot.plot({\n  width: 560,\n  height: 560,\n  projection: d3.geoMercator().scale(zoom).center([dg  , hb]),\n  marks: [\n    Plot.geo(countries, { stroke: \"#333\" , fill: \"#E5F14E\"}),\n    Plot.geo(regionsData, { stroke: \"#000\", fill: \"none\" }),\n    Plot.dot(cities, \n      {y:\"latitude\", x:\"longitude\", stroke:\"#FF7400\", fill:\"#FF7400\", channels:\n        {name:\"name\", population:\"population\"}, \n      tip:\n        {format:{latitude:false, longitude:false, name:true, population:true}, fontSize:25}\n      }\n    ),\n    Plot.dot(cities, Plot.pointer({y:\"latitude\", x:\"longitude\", fill: \"red\", r: 8})),\n    Plot.dot(cities, {x:point[0], y:point[1], fill:\"#216C5C\", stroke:\"#216C5C\"}),\n    Plot.geo(circle, {stroke: \"#216C5C\", strokeWidth: 2}),\n    \n  ]\n})\nmutable downclick = [0, 0]\nmutable upclick = [0, 0]\nmutable move = 0\n\nplot.addEventListener(\"mousedown\", (event) =&gt; {\n  mutable downclick = [event.x, event.y]\n  mutable move = 1\n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplot.addEventListener(\"mouseup\", (event) =&gt; {\n  mutable move = 0\n\n});\n\n\n\n\n\n\n\nplot.addEventListener(\"wheel\", (event) =&gt; {\n  if(zoom &lt; 100000 && zoom &gt; 500){\n\n    mutable zoom = zoom - event.deltaY*10\n  }\n  else if(zoom &lt; 500){\n    mutable zoom = 501\n  }\n  else if(zoom &gt; 100000){\n    mutable zoom = 99999\n  }\n\n});\n\n\n\n\n\n\n\nplot.addEventListener(\"mousemove\", (event) =&gt; {\n  mutable upclick = [event.x, event.y]\n  if((upclick[0] - downclick[0] &gt; 2 || upclick[0] - downclick[0] &lt; -2 || upclick[1] - downclick[1] &gt; 2 || upclick[1] - downclick[1] &lt; -2 ) && move==1){\n\n    mutable dg = dg - ((upclick[0] - downclick[0])/(10+(zoom/1000)))\n    mutable hb = hb + ((upclick[1] - downclick[1])/(25+(zoom/1000)))\n    mutable downclick = [event.x, event.y]\n\n  }\n});\n\n\n\n\n\n\n\nplot.addEventListener(\"click\", (event) =&gt; {\n  // COnvertir event.x et event.y (ensemble x/y) en coordonnées lon/lat\n  const nombrelon = 65/zoom\n  const nombrelat = 50/zoom\n  mutable point = [(dg-(400*nombrelon)) + ((event.x-252)*nombrelon) ,(hb+(150*nombrelat)) - ((event.y-225)*nombrelat)]\n  console.log(plot)\n  console.log(event.x)\n  console.log(event.y)\n})\n\n\n\n\n\n\n\nplot.addEventListener(\"resize\", () =&gt; {\n  // Set plot width and height to a fixed value\n  plot.setAttribute(\"width\", 900);\n  plot.setAttribute(\"height\", 900);\n  console.log(\"bfgreyffren\")\n});\n\n\n\n\n\n\n\n\n\nwidth\n\n\n\n\n\n\n\nlayoutWidth\n\n\n\n\n\n\n\nviewof range = Inputs.range([0,1000], {step:1,label: \"Nombre max de ville à afficher:\"})\nviewof distance = Inputs.range([0,1000], {step:1,label: \"Distance max:\"})\nviewof population = Inputs.range([0,1000], {step:1, label: \"Population min:\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd3 = require(\"d3@6\")\n\n\nfrance = countries.features.find(d =&gt; d.properties.NAME === \"France\")\n\ndepartements = FileAttachment(\"Data/departements.json\").json()\n\nregionsData = FileAttachment(\"Data/regions.json\").json()\n\ncountries = topojson.feature(topology, topology.objects.ne_10m_admin_0_countries)\n\ntopojson = require(\"topojson-client@3\")\n\ntopology = FileAttachment(\"Data/10m-countries_topo.json\").json()\n\ncities =FileAttachment(\"Data/fr.csv\").csv({typed:true})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFilter"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "Test",
    "section": "",
    "text": "d3 = require(\"d3@6\")\nviewof zoomer = html`&lt;input type=range min=1600 max=10000 step=any&gt;`\n\nmap = {\n  const width = 900, height = 900; \n  const path = d3.geoPath();\n\n  const projection = d3.geoConicConformal() // projection Lambert-93\n    .center([2.454071, 46.279229]) // On centre sur la France\n    .translate([width /2 , height / 2])\n    .scale(zoomer) //on zoome; \n\n  path.projection(projection);\n  \n  /* on crée l'objet svg */\n  const svg = d3.create('svg')\n    .style('max-width', '100%')\n    .attr(\"id\", \"svg\")  \n    .attr('viewBox', [0, 0, width, height])\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .attr(\"fill\", \"#d3dfde\")\n    .attr(\"class\", \"Blues\");\n\n  const deps = svg.append(\"g\");\n  /* un fichier au format geojson a été attaché à ce notebook\n  on en trouve içi : https://france-geojson.gregoiredavid.fr/\n  ou là : https://unpkg.com/world-atlas@1.1.4/world/110m.json\n  mais on doit pouvoir en faire avec QGIS\n  */\n  const geojson = FileAttachment('departments.json').json();\n  \n  /* on crée une zone + une fonction d'update pour afficher la mention département/région à la volée\n  */\n  var div = svg.append(\"text\")                \n    .attr('transform', 'translate(10, 20)')\n    .attr(\"class\", \"tooltip\")\n  \n  function update(d) {\n    svg.selectAll(\".tooltip\")\n      .attr(\"x\", 0)\n      .attr(\"y\", 0)\n      .style(\"fill\", \"green\")\n      .text(d.properties.NOM_DEPT)\n    svg.selectAll(\".tooltip\").append(\"tspan\")\n       .attr(\"x\", 0)\n       .attr(\"y\", 15)\n       .style(\"fill\", \"black\")\n       .text(\"Région : \" + d.properties.NOM_REGION)\n  }\n \n /* on crée la map\n */\n geojson.then(function(geojson) {\n    deps.selectAll(\"path\")\n        .data(geojson.features)\n        .enter()\n        .append(\"path\")\n        .style(\"stroke\", \"white\")\n        .on(\"mouseover\", function(d) {update(d.srcElement.__data__)})\n        .attr(\"d\", path)\n  });   \n  return svg.node();\n}\n\nFileAttachment('./Data/departments.json').json().then(function(geojson) {\n    var a = [];\n    geojson.features.forEach(function(d){\n      a.push(d.properties.NOM_DEPT);\n    });\n    return a;\n})"
  }
]