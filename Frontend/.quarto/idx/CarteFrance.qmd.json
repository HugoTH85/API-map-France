{"title":"Carte des différentes villes de France","markdown":{"yaml":{"title":"Carte des différentes villes de France","type":"website","execute":{"echo":false},"format":{"html":{"page-layout":"custom"}}},"containsRefs":false,"markdown":"\n\n:::{layout=\"[[1 ,1],[1,1]]\"}\n```{ojs}\nmutable url = \"http://localhost:5000/city?\"\nmutable zoom = 2000\nmutable dg = 7\nmutable hb = 47\nmutable point = [2, 47]\n\nmutable circle = d3.geoCircle().center(point).radius(range/200)()\n\nmutable proj = d3.geoMercator().scale(zoom).center([dg  , hb])\nplot = Plot.plot({\n  width: 500,\n  height: 500,\n  projection: proj,\n  marks: [\n    Plot.geo(countries, { stroke: \"#333\" , fill: \"#eee\"}),\n    Plot.geo(regionsData, { stroke: \"#000\", fill: (d)=>{\n      if(region[0]==\"Toutes les régions\" ){\n        return \"green\";\n      }\n      else if(region.includes(d.properties.nom)){\n        return \"green\";\n      }\n      else{\n        return \"#eee\";\n      }\n    }}),\n    Plot.dot(cities, \n      {y:\"latitude\", x:\"longitude\", stroke:\"#FF7400\", fill:\"#FF7400\", channels:\n        {name:\"name\", population:\"population\"}, \n      tip:\n        {format:{latitude:false, longitude:false, name:true, population:true}, fontSize:25}\n      }\n    ),\n    Plot.dot(cities, Plot.pointer({y:\"latitude\", x:\"longitude\", fill: \"red\", r: 1})),\n    Plot.dot(cities, {x:point[0], y:point[1], fill:\"#216C5C\", stroke:\"#216C5C\"}),\n    Plot.geo(circle, {stroke: \"#216C5C\", strokeWidth: 2}),\n    \n  ]\n})\n\n```\n\n\n```{ojs}\n//| panel: sidebar\nviewof table = Inputs.table(cities, {\n  columns:[\n    \"name\",\n    \"region\",\n    \"population\",\n    \"distance\"\n  ],\n  header:{\n    name: \"Noms\",\n    region: \"Region\",\n    population: \"Population\",\n    distance: \"Distance\"\n  }\n})\n\n```\n\n\n\n```{ojs}\n//| panel: input\nviewof NumberCities = Inputs.range([1,2000], {step:1,label: \"Nombre max de ville à afficher:\", value: 1000})\nviewof range = Inputs.range([1,1000], {step:1,label: \"Distance max:\"})\nviewof population = Inputs.range([0,10000000], {step:1, label: \"Population minimal:\", value:0})\n\n```\n\n```{ojs}\n//| panel: sidebar\n\nviewof region = Inputs.checkbox([\"Toutes les régions\", \"Auvergne-Rhone-Alpes\", \"Bourgogne-Franche-Comte\", \"Bretagne\", \"Centre-Val de Loire\", \"Corse\", \"Grand Est\", \"Hauts-de-France\",\"Ile-de-France\", \"Normandie\", \"Nouvelle-Aquitaine\", \"Occitanie\", \"Pays de la Loire\", \"Provence-Alpes-Cote d’Azur\" ], {value:[\"Toutes les régions\"]})\n\n\nviewof button = Inputs.button(\"Rechercher\", { reduce: () => LoadData()})\n\n```\n:::\n\n```{ojs}\n//| output: false\n{\n  \n  const clickplot = d3.select(plot).on(\"click\",handleclick);    \n  const zoomplot = d3.zoom().on(\"zoom\", handlezoom);\n  function handlezoom(e){\n    mutable zoom = zoom * e.transform.k\n    if(zoom<150){\n      mutable zoom = 150\n    }\n    if(zoom>20000){\n      mutable zoom = 20000\n    }\n    if(zoom<2000){\n      mutable dg = dg -(e.transform.x/30)\n      mutable hb = hb +(e.transform.y/40)\n    }\n    else if(zoom <5000){\n      mutable dg = dg -(e.transform.x/60)\n      mutable hb = hb +(e.transform.y/90)\n\n    }\n    else if(zoom<10000){\n      mutable dg = dg -(e.transform.x/100)\n      mutable hb = hb +(e.transform.y/150)\n    }\n    \n  }\n\n  function handleclick(e){\n    var p = proj.invert(d3.pointer(e));\n    mutable point = p\n  }\n  function initZoom(){\n    d3.select(plot).call(zoomplot)\n  }\n  initZoom();\n}\n```\n\n```{ojs}\n//| output: false\nmutable d = 0\n\n\n// Définir l'URL de l'API\nfunction LoadData()\n{\n  const url_cities = \"&number=\"+NumberCities\n  const url_distance = \"&distance=\"+parseInt(range/2)\n  const url_pop = \"&min_pop=\"+population\n\n  let url_region = \"&regions=\" \n  for(let i=0; i<region.length; i++){\n    if(region[i]==\"Toutes les régions\"){\n      url_region = \"&regions=\"\n      break\n    }\n    if(i==0){\n      url_region= url_region+region[i]\n    }\n    else{\n      url_region= url_region+\",\"+region[i]\n\n    }\n  }\n  const url_latitude = \"latitude=\"+point[1]\n  const url_longitude = \"&longitude=\"+point[0]\n  const url_toput = url +url_latitude+url_longitude+url_distance+url_pop+url_cities+url_region\n\n  // Envoyer une requête GET\n  fetch(url_toput)\n  .then(response => response.text())\n  .then(datas => {\n    const parsedData = papaparse.parse(datas, { header: true }).data;\n    mutable d = papaparse.parse(datas)[\"data\"]\n    const citiesData = parsedData.map(d => {\n      return {\n        name: d.Ville,\n        region: d.Région,\n        population: parseInt(d.Population),\n        latitude: parseFloat(d.Latitude),\n        longitude: parseFloat(d.Longitude),\n        distance: parseFloat(d.Distance)\n      };\n    });\n    mutable cities = citiesData\n  })\n  .catch(error => {\n    // Gérer les erreurs\n    console.error(error);\n  });\n}\n\nfunction transpose(matrix) {\n  return _.zip(...matrix);\n}\n\n```\n\n```{ojs}\n//| output: false\n\nd3 = require(\"d3@7\")\npapaparse  = require(\"papaparse\")\n\nregionsData = FileAttachment(\"Data/regions.json\").json()\n\nregionData\ncountries = topojson.feature(europe, europe.objects.europe)\n\n\ntopojson = require(\"topojson-client@3\")\n\neurope= FileAttachment(\"Data/europe.topojson\").json()\nmutable cities =FileAttachment(\"Data/fr.csv\").csv({typed:true})\n\n```\n\n\n","srcMarkdownNoYaml":"\n\n:::{layout=\"[[1 ,1],[1,1]]\"}\n```{ojs}\nmutable url = \"http://localhost:5000/city?\"\nmutable zoom = 2000\nmutable dg = 7\nmutable hb = 47\nmutable point = [2, 47]\n\nmutable circle = d3.geoCircle().center(point).radius(range/200)()\n\nmutable proj = d3.geoMercator().scale(zoom).center([dg  , hb])\nplot = Plot.plot({\n  width: 500,\n  height: 500,\n  projection: proj,\n  marks: [\n    Plot.geo(countries, { stroke: \"#333\" , fill: \"#eee\"}),\n    Plot.geo(regionsData, { stroke: \"#000\", fill: (d)=>{\n      if(region[0]==\"Toutes les régions\" ){\n        return \"green\";\n      }\n      else if(region.includes(d.properties.nom)){\n        return \"green\";\n      }\n      else{\n        return \"#eee\";\n      }\n    }}),\n    Plot.dot(cities, \n      {y:\"latitude\", x:\"longitude\", stroke:\"#FF7400\", fill:\"#FF7400\", channels:\n        {name:\"name\", population:\"population\"}, \n      tip:\n        {format:{latitude:false, longitude:false, name:true, population:true}, fontSize:25}\n      }\n    ),\n    Plot.dot(cities, Plot.pointer({y:\"latitude\", x:\"longitude\", fill: \"red\", r: 1})),\n    Plot.dot(cities, {x:point[0], y:point[1], fill:\"#216C5C\", stroke:\"#216C5C\"}),\n    Plot.geo(circle, {stroke: \"#216C5C\", strokeWidth: 2}),\n    \n  ]\n})\n\n```\n\n\n```{ojs}\n//| panel: sidebar\nviewof table = Inputs.table(cities, {\n  columns:[\n    \"name\",\n    \"region\",\n    \"population\",\n    \"distance\"\n  ],\n  header:{\n    name: \"Noms\",\n    region: \"Region\",\n    population: \"Population\",\n    distance: \"Distance\"\n  }\n})\n\n```\n\n\n\n```{ojs}\n//| panel: input\nviewof NumberCities = Inputs.range([1,2000], {step:1,label: \"Nombre max de ville à afficher:\", value: 1000})\nviewof range = Inputs.range([1,1000], {step:1,label: \"Distance max:\"})\nviewof population = Inputs.range([0,10000000], {step:1, label: \"Population minimal:\", value:0})\n\n```\n\n```{ojs}\n//| panel: sidebar\n\nviewof region = Inputs.checkbox([\"Toutes les régions\", \"Auvergne-Rhone-Alpes\", \"Bourgogne-Franche-Comte\", \"Bretagne\", \"Centre-Val de Loire\", \"Corse\", \"Grand Est\", \"Hauts-de-France\",\"Ile-de-France\", \"Normandie\", \"Nouvelle-Aquitaine\", \"Occitanie\", \"Pays de la Loire\", \"Provence-Alpes-Cote d’Azur\" ], {value:[\"Toutes les régions\"]})\n\n\nviewof button = Inputs.button(\"Rechercher\", { reduce: () => LoadData()})\n\n```\n:::\n\n```{ojs}\n//| output: false\n{\n  \n  const clickplot = d3.select(plot).on(\"click\",handleclick);    \n  const zoomplot = d3.zoom().on(\"zoom\", handlezoom);\n  function handlezoom(e){\n    mutable zoom = zoom * e.transform.k\n    if(zoom<150){\n      mutable zoom = 150\n    }\n    if(zoom>20000){\n      mutable zoom = 20000\n    }\n    if(zoom<2000){\n      mutable dg = dg -(e.transform.x/30)\n      mutable hb = hb +(e.transform.y/40)\n    }\n    else if(zoom <5000){\n      mutable dg = dg -(e.transform.x/60)\n      mutable hb = hb +(e.transform.y/90)\n\n    }\n    else if(zoom<10000){\n      mutable dg = dg -(e.transform.x/100)\n      mutable hb = hb +(e.transform.y/150)\n    }\n    \n  }\n\n  function handleclick(e){\n    var p = proj.invert(d3.pointer(e));\n    mutable point = p\n  }\n  function initZoom(){\n    d3.select(plot).call(zoomplot)\n  }\n  initZoom();\n}\n```\n\n```{ojs}\n//| output: false\nmutable d = 0\n\n\n// Définir l'URL de l'API\nfunction LoadData()\n{\n  const url_cities = \"&number=\"+NumberCities\n  const url_distance = \"&distance=\"+parseInt(range/2)\n  const url_pop = \"&min_pop=\"+population\n\n  let url_region = \"&regions=\" \n  for(let i=0; i<region.length; i++){\n    if(region[i]==\"Toutes les régions\"){\n      url_region = \"&regions=\"\n      break\n    }\n    if(i==0){\n      url_region= url_region+region[i]\n    }\n    else{\n      url_region= url_region+\",\"+region[i]\n\n    }\n  }\n  const url_latitude = \"latitude=\"+point[1]\n  const url_longitude = \"&longitude=\"+point[0]\n  const url_toput = url +url_latitude+url_longitude+url_distance+url_pop+url_cities+url_region\n\n  // Envoyer une requête GET\n  fetch(url_toput)\n  .then(response => response.text())\n  .then(datas => {\n    const parsedData = papaparse.parse(datas, { header: true }).data;\n    mutable d = papaparse.parse(datas)[\"data\"]\n    const citiesData = parsedData.map(d => {\n      return {\n        name: d.Ville,\n        region: d.Région,\n        population: parseInt(d.Population),\n        latitude: parseFloat(d.Latitude),\n        longitude: parseFloat(d.Longitude),\n        distance: parseFloat(d.Distance)\n      };\n    });\n    mutable cities = citiesData\n  })\n  .catch(error => {\n    // Gérer les erreurs\n    console.error(error);\n  });\n}\n\nfunction transpose(matrix) {\n  return _.zip(...matrix);\n}\n\n```\n\n```{ojs}\n//| output: false\n\nd3 = require(\"d3@7\")\npapaparse  = require(\"papaparse\")\n\nregionsData = FileAttachment(\"Data/regions.json\").json()\n\nregionData\ncountries = topojson.feature(europe, europe.objects.europe)\n\n\ntopojson = require(\"topojson-client@3\")\n\neurope= FileAttachment(\"Data/europe.topojson\").json()\nmutable cities =FileAttachment(\"Data/fr.csv\").csv({typed:true})\n\n```\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"CarteFrance.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.542","preview":{"host":"127.23.0.4","port":3000},"theme":"cosmo","title":"Carte des différentes villes de France","type":"website","page-layout":"custom"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}